# - Try to find Tensorflow
#
# The following variables are optionally searched for defaults
#  TENSORFLOW_ROOT_DIR:            Base directory where all Tensorflow components are found
#
# The following are set after configuration is done:
#  TENSORFLOW_FOUND
#  TENSORFLOW_VERSION
#  TENSORFLOW_INCLUDE_DIRS
#  TENSORFLOW_LIBRARIES
#  TENSORFLOW_PROTOBUF_VERSION

include(FindPackageHandleStandardArgs)
unset(TENSORFLOW_FOUND)

find_path(TENSORFLOW_INCLUDE_DIR
        NAMES
        tensorflow/core
        tensorflow/cc
        tensorflow/compiler
        HINTS
        /usr/include
        /usr/local/include
        ${TENSORFLOW_ROOT_DIR})
find_library(TENSORFLOW_LIBRARY NAMES tensorflow_cc
        HINTS
        /usr/lib
        /usr/local/lib
        ${TENSORFLOW_ROOT_DIR})

if(TENSORFLOW_INCLUDE_DIR AND TENSORFLOW_LIBRARY)
    set(TENSORFLOW_INCLUDE_DIRS ${TENSORFLOW_INCLUDE_DIR})
    set(TENSORFLOW_LIBRARIES ${TENSORFLOW_LIBRARY})
    mark_as_advanced(TENSORFLOW_ROOT_DIR TENSORFLOW_LIBRARY TENSORFLOW_INCLUDE_DIR)

    # Get the Tensorflow
    file(READ ${TENSORFLOW_INCLUDE_DIR}/tensorflow/core/public/version.h TENSORFLOW_VERSION_HEADER_CONTENT)
    string(REGEX MATCH [[define TF_MAJOR_VERSION ([0-9]+)]]
            TENSORFLOW_VERSION_MAJOR "${TENSORFLOW_VERSION_HEADER_CONTENT}")
    string(REGEX REPLACE "define TF_MAJOR_VERSION " ""
            TENSORFLOW_VERSION_MAJOR "${TENSORFLOW_VERSION_MAJOR}")
    string(REGEX MATCH [[define TF_MINOR_VERSION ([0-9]+)]]
            TENSORFLOW_VERSION_MINOR "${TENSORFLOW_VERSION_HEADER_CONTENT}")
    string(REGEX REPLACE "define TF_MINOR_VERSION " ""
            TENSORFLOW_VERSION_MINOR "${TENSORFLOW_VERSION_MINOR}")
    string(REGEX MATCH [[define TF_PATCH_VERSION ([0-9]+)]]
            TENSORFLOW_VERSION_PATCH "${TENSORFLOW_VERSION_HEADER_CONTENT}")
    string(REGEX REPLACE "define TF_PATCH_VERSION " ""
            TENSORFLOW_VERSION_PATCH "${TENSORFLOW_VERSION_PATCH}")
    if(NOT TENSORFLOW_VERSION_MAJOR)
        set(TENSORFLOW_VERSION "?")
    else()
        set(TENSORFLOW_VERSION ${TENSORFLOW_VERSION_MAJOR}.${TENSORFLOW_VERSION_MINOR}.${TENSORFLOW_VERSION_PATCH})
    endif()

    # Get the version of protobuf
    file(READ ${TENSORFLOW_INCLUDE_DIR}/tensorflow/core/framework/versions.pb.h TENSORFLOW_PROTOBUF_CONTENT)
    string(REGEX MATCH "if GOOGLE_PROTOBUF_VERSION < ([0-9]+)"
            TF_PROTOBUF_VERSION "${TENSORFLOW_PROTOBUF_CONTENT}")
    string(REGEX REPLACE "if GOOGLE_PROTOBUF_VERSION < " ""
            TF_PROTOBUF_VERSION "${TF_PROTOBUF_VERSION}")

    string(LENGTH "${TF_PROTOBUF_VERSION}" TF_PROTOBUF_VERSION_LENGTH)
    MATH(EXPR TF_PROTOBUF_T1 "${TF_PROTOBUF_VERSION_LENGTH}-6")
    MATH(EXPR TF_PROTOBUF_T2 "${TF_PROTOBUF_VERSION_LENGTH}-4")
    MATH(EXPR TF_PROTOBUF_T3 "${TF_PROTOBUF_VERSION_LENGTH}-3")
    string(SUBSTRING "${TF_PROTOBUF_VERSION}"
            ${TF_PROTOBUF_T3} ${TF_PROTOBUF_VERSION_LENGTH} TF_PROTOBUF_VERSION_PATCH)
    MATH(EXPR TF_PROTOBUF_VERSION_PATCH "${TF_PROTOBUF_VERSION_PATCH}")
    string(SUBSTRING "${TF_PROTOBUF_VERSION}"
            ${TF_PROTOBUF_T1} ${TF_PROTOBUF_T2} TF_PROTOBUF_VERSION_MINOR)
    MATH(EXPR TF_PROTOBUF_VERSION_MINOR "${TF_PROTOBUF_VERSION_MINOR}")
    string(SUBSTRING "${TF_PROTOBUF_VERSION}"
            0 ${TF_PROTOBUF_T1} TF_PROTOBUF_VERSION_MAJOR)
    MATH(EXPR TF_PROTOBUF_VERSION_MAJOR "${TF_PROTOBUF_VERSION_MAJOR}")
    set(TENSORFLOW_PROTOBUF_VERSION ${TF_PROTOBUF_VERSION_MAJOR}.${TF_PROTOBUF_VERSION_MINOR}.${TF_PROTOBUF_VERSION_PATCH})

    message(STATUS "Found Tensorflow: v${TENSORFLOW_VERSION} (include: ${TENSORFLOW_INCLUDE_DIR}, library: ${TENSORFLOW_LIBRARY}, protobuf_version: ${TENSORFLOW_PROTOBUF_VERSION})")
endif()

find_package_handle_standard_args(
        TensorFlow
        VERSION_VAR TENSORFLOW_VERSION
        REQUIRED_VARS TENSORFLOW_INCLUDE_DIRS TENSORFLOW_LIBRARIES TENSORFLOW_PROTOBUF_VERSION
        FAIL_MESSAGE "Failed to find Tensorflow in path: ${TENSORFLOW_ROOT_DIR} (Did you set TENSORFLOW_ROOT_DIR properly?)"
)
